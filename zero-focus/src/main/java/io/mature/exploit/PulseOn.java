package io.mature.exploit;

import io.horizon.atom.program.KPathAtom;
import io.horizon.eon.VString;
import io.horizon.eon.VValue;
import io.horizon.eon.spec.VWeb;
import io.horizon.uca.cache.Cc;
import io.mature.boot.routine.EngrossLoad;
import io.mature.exploit.atom.QMenu;
import io.mature.exploit.atom.QModeller;
import io.vertx.up.unity.Ux;
import io.vertx.up.util.Ut;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * 统一入口，防止新版的单独处理，直接在主函数中调用对应信息启动
 *
 * @author lang : 2023-06-12
 */
public class PulseOn {
    private static final String RESOURCE_ROOT = "src/main/resources/";
    private static final Cc<String, QModeller> CC_MODELLER = Cc.openThread();

    // --------------------- 数据相关
    public static void runActivity(final Class<?> mainClass) {
        final String path = VWeb.init.OOB;
        EngrossLoad.run(mainClass,
            path,                 // path     = init/oob/activity-rule
            VValue.FALSE,                // oob      = false
            "activity-rule"              // prefix   = "activity-rule"
        );
    }

    public static void runCab(final Class<?> mainClass) {
        final String path = VWeb.init.oob.CAB;
        EngrossLoad.run(mainClass,
            path,                 // path     = init/oob/cab
            VValue.FALSE,                // oob      = false
            null                         // prefix   = null
        );
    }

    public static void runData(final Class<?> mainClass) {
        final String path = VWeb.init.oob.DATA;
        EngrossLoad.run(mainClass,
            path,                 // path     = init/oob/data
            VValue.FALSE,                // oob      = false
            null                         // prefix   = null
        );
    }

    public static void runEnvironment(final Class<?> mainClass) {
        final String path = VWeb.init.oob.ENVIRONMENT;
        EngrossLoad.run(mainClass,
            path,                 // path     = init/oob/environment
            VValue.FALSE,                // oob      = false
            null                         // prefix   = null
        );
    }

    public static void runPermission(final Class<?> mainClass, final String role) {
        final String path = VWeb.init.oob.role.of(role);
        EngrossLoad.run(mainClass,
            path,                 // path     = init/oob/role/LANG.YU
            VValue.FALSE,                // oob      = false
            null                         // prefix   = null
        );
    }

    public static void runOob(final Class<?> mainClass, final String prefix) {
        final String path = VWeb.init.OOB;
        EngrossLoad.run(mainClass,
            path,
            VValue.TRUE,
            prefix
        );
    }

    public static void runOob(final Class<?> mainClass) {
        final String path = VWeb.init.OOB;
        EngrossLoad.run(mainClass,
            path,
            VValue.TRUE,
            null
        );
    }

    // --------------------- 菜单相关
    public static void menuReview(final Class<?> mainClass) {
        // 打印所有菜单
        QMenu.menuFetch(List.of(), true).compose(menus -> {
            System.out.println(menus.encodePrettily());
            return Ux.futureT();
        }).compose(nil -> QMenu.menuFetch(List.of(), false)).onSuccess(menus -> {
            System.out.println(menus.encodePrettily());
            System.exit(0);
        });
    }

    public static void menuWrite(final Class<?> mainClass) {
        // 提取角色相关信息
        final List<String> files = Ut.ioFiles(VWeb.init.permission.ui_menu.ROLE);
        final Set<String> roleSet = new HashSet<>();
        files.forEach(file -> {
            final String role = file.replace(".json", VString.EMPTY);
            roleSet.add(role);
        });

        // 处理角色相关菜单
        QMenu.menuInitialize(roleSet)
            .compose(map -> QMenu.menuOutput(map, RESOURCE_ROOT))
            .onSuccess(output -> {
                System.out.println("执行完成！");
                System.exit(0);
            });
    }

    // --------------------- 建模相关
    public static void atomLoad(final Class<?> mainClass, final KPathAtom pathAtom) {
        EngrossLoad.run(mainClass,
            pathAtom.path(),       // path      = init/oob/cmdb
            VValue.FALSE,                 // oob       = false
            null                          // prefix    = null
        );
    }

    public static void atomInit(final Class<?> mainClass, final KPathAtom pathAtom) {
        final QModeller modeller = atomModeller(pathAtom);
        modeller.initialize();
    }

    public static void atomPre(final Class<?> mainClass, final KPathAtom pathAtom) {
        final QModeller modeller = atomModeller(pathAtom);
        modeller.preprocess();
    }

    public static void atomUi(final Class<?> mainClass, final KPathAtom pathAtom, final String prefix) {
        EngrossLoad.run(mainClass,
            pathAtom.atomUi(),
            VValue.FALSE,
            prefix
        );
    }

    private static QModeller atomModeller(final KPathAtom pathAtom) {
        final String input = pathAtom.input();
        final String output = pathAtom.output();
        final String hashKey = Ut.encryptMD5(input + VString.COLON + output);
        return CC_MODELLER.pick(() -> QModeller.of(input, output), hashKey);
    }
}
